check make :
 flask.make_response(*args)
  flask.send_file(filename_or_fp, mimetype=None, as_attachment=False, attachment_filename=None, add_etags=True, cache_timeout=None, conditional=False, last_modified=None)
   flask.send_from_directory(directory, filename, **options)
Configuration

class flask.Config(root_path, defaults=None)

    Works exactly like a dict but provides ways to fill it from files or special dictionaries. There are two common patterns to populate the config.

    Either you can fill the config from a config file:

    app.config.from_pyfile('yourconfig.cfg')

    Or alternatively you can define the configuration options in the module that calls from_object() or provide an import path to a module that should be loaded. It is also possible to tell it to use the same module and with that provide the configuration values just before the call:

    DEBUG = True
    SECRET_KEY = 'development key'
    app.config.from_object(__name__)




app.config['IMAGE_STORE_TYPE'] = 'fs'
app.config['IMAGE_STORE_PATH'] = '/var/app/images'
app.config['IMAGE_STORE_BASE_URL'] = 'http://img.website.com'
image_store_config = app.config.get_namespace('IMAGE_STORE_')

reqparse 
request_tearing_down
from werkzeug.exceptions import HTTPException








@jwt.user_identity_loader
def user_identity_lookup(user):
    return user.id


# Register a callback function that loades a user from your database whenever
# a protected route is accessed. This should return any python object on a
# successful lookup, or None if the lookup failed for any reason (for example
# if the user has been deleted from the database).
@jwt.user_lookup_loader
def user_lookup_callback(_jwt_header, jwt_data):
    identity = jwt_data["sub"]
    return User.query.filter_by(id=identity).one_or_none()



https://flask-jwt-extended.readthedocs.io/en/stable/add_custom_data_claims/
https://flask-jwt-extended.readthedocs.io/en/stable/refreshing_tokens/
#app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://jztcmnavqvekbf:4e05e1665e4573ddfca5cba53c4788910d5ff6ac306b8a696b15aaa6914c146c@ec2-54-220-170-192.eu-west-1.compute.amazonaws.com:5432/dc3fefsncq4lvc'
